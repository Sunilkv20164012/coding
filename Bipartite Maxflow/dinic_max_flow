    #include<bits/stdc++.h>
    using namespace std;
     
    // don't forget to adjust sizes in the functions to the new n if exists
     
    const int N = 50;
    const long long INF = 1e18;
     
    struct edge{
        int a,b;
        long long cap,flow;
    };
     
    int n,m,s,t,ptr[N],d[N],q[N];
    vector<edge> e;
    vector<int> g[N];
     
    void add_edge(int a,int b,long long cap){
        edge e1 = {a,b,cap,0ll};
        edge e2 = {b,a,0ll,0ll};
        g[a].push_back((int)e.size());
        e.push_back(e1);
        g[b].push_back((int)e.size());
        e.push_back(e2);
    }
     
     
    bool bfs(){
        int qh=0, qt=0;
    	q[qt++] = s;
    	memset(d,-1,(n+3)*sizeof(d[0]));
    	d[s] =0;
    	while(qh<qt && d[t] == -1){
            int v = q[qh++];
            for(size_t i = 0;i<g[v].size();i++){
                int id = g[v][i];
                int to = e[id].b;
                if(d[to] == -1 && e[id].flow<e[id].cap){
                    d[to] = d[v]+1;
                    q[qt++]= to;
                }
            }
    	}
    	return d[t]!=-1;
    }
     
    long long dfs(int v,long long flow){
        if(!flow)return 0;
        if(v == t) return flow;
        for(;ptr[v]<g[v].size();ptr[v]++){
            int id = g[v][ptr[v]];
            int to = e[id].b;
            if(d[to]!=d[v]+1)continue;
            long long pushed = dfs(to,min(flow,e[id].cap-e[id].flow));
            if(pushed){
                e[id].flow+=pushed;
                e[id^1].flow-=pushed;
                return pushed;
            }
        }
        return 0;
    }
     
    long long dinic(){
        long long flow=0;
        while(1){
            if(!bfs())break;
            memset(ptr,0,(n+3)*sizeof ptr[0]);
            while(long long pushed = dfs(s,INF)){
                flow+=pushed;
            }
        }
        return flow;
    }
     
    int main(){
        ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
     
        s = 'S' - 'A';
        t = 'T' - 'A';
     
        n = 20;
        cin>>m;
     
        for(int i=0;i<m;i++){
            char x,y;
            int z;
            cin>>x>>y>>z;
            add_edge(x-'A',y-'A',z);
        }
     
        cout<<dinic();
     
        return 0;
    }
