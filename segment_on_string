#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define mp make_pair
#define nodes 400005
#define ll long long int

ll a[nodes]={0};
ll tree[4*nodes][26]={0};
ll lazy[4*nodes][26] = {0};
ll b[26]={0};
string str;

void build(ll node,ll l,ll r)
{
   if(l==r){
      tree[node][str[l]-'a']++;
      lazy[node][str[l]-'a']=0;
      //cout<<"just "<<(str[l]-'a')<<" ";
      return ;
   }
   ll mid=(l+r)/2;
   build(2*node,l,mid);
   build(2*node+1,mid+1,r);
   for(ll i=0;i<26;i++)
   tree[node][i]=(tree[2*node][i]+tree[2*node+1][i]);
}
void add(ll node,ll start,ll end,ll j)
{
   tree[node][j]=(lazy[node][j]-1)*(end-start+1);
   if(start!=end){
      lazy[2*node][j]=lazy[node][j];
      lazy[2*node+1][j]=lazy[node][j];
   }
   lazy[node][j]=0;
}
ll n;
void update1(ll node,ll start,ll end,ll l,ll r,ll j,ll x)
{
   if(lazy[node][j]!=0){
      add(node,start,end,j);
   }
   if(l>end||r<start)return ;
   if(start>=l&&end<=r){
      lazy[node][j]=x;
      if(lazy[node][j]!=0){
         add(node,start,end,j);
      }
   }
   else {
      ll mid=(start+end)/2;
      update1(2*node,start,mid,l,r,j,x);
      update1(2*node+1,mid+1,end,l,r,j,x);
      tree[node][j]=(tree[2*node][j]+tree[2*node+1][j]);
   }
}
ll query(ll node,ll start,ll end,ll l,ll r,ll c)
{
   if(lazy[node][c]!=0){
      add(node,start,end,c);
   }
   if(l>end||r<start)return 0;
   if(start>=l&&end<=r){
      	return tree[node][c];
	  }
   else {
      ll mid=(start+end)/2;
      ll p1=query(2*node,start,mid,l,r,c);
      ll p2=query(2*node+1,mid+1,end,l,r,c);
      return (p1+p2);}
}
ll main()
{
	
	ll n,q,i,j;
	cin>>n>>q;
	cin>>str;
	str="0"+str;
	memset(lazy,0,sizeof(lazy));
	memset(tree,0,sizeof(tree));
	build(1,1,n);
	//q=3;
	while(q--){
		ll l,r,k;
		cin>>l>>r>>k;
		
		
		memset(b,0,sizeof(b));
		for(i=0;i<26;i++)
      	{
      		b[i]=query(1,1,n,l,r,i);
      		//if(b[i])
      		//cout<<(char)(i+'a')<<" ";
	  	}
	  	//cout<<"\n\n";
	  	for(i=0;i<26;i++)
			{
				update1(1,1,n,l,r,i,1);
			}
		
		if(k)
		{
			ll index=l;
			for(i=0;i<26;i++)
			{
				update1(1,1,n,index,index+b[i]-1,i,2);
				index+=b[i];
			}
			
		}
		else
		{
			ll index=r;
			for(i=0;i<26;i++)
			{
				update1(1,1,n,index-b[i]+1,index,i,2);
				index-=b[i];
			}
			
		}
		
	}
	
	for(i=1;i<=n;i++)
	{
		for(j=0;j<26;j++)
		{
			if(query(1,1,n,i,i,j))
			cout<<(char)(j+'a');
		}
	//	cout<<"\n";
	}
	cout<<endl;
}
















